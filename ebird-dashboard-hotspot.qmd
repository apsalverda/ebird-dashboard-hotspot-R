---
title: "eBird User Dashboard"
#author: "Anne Pier Salverda"
format: 
  dashboard:
    orientation: columns
    expandable: false
    theme: 
      - cosmo
      - styles.css
    nav-buttons:
      - icon: envelope-at-fill
        href: mailto:salverda@yahoo.com?subject=Your eBird dashboard
        target: _blank
      - icon: linkedin
        href: https://www.linkedin.com/in/anne-pier-salverda-37ab7042/
        target: _blank
      - icon: mortarboard-fill
        href: https://scholar.google.com/citations?user=dnlnAJQAAAAJ
        target: _blank
      - icon: github
        href: https://github.com/apsalverda/ebird-dashboard-hotspot
        target: _blank
    sidebar:
      style: "docked"
      background: "light"
      collapse: false
server: shiny
---

```{css, echo = FALSE, include = TRUE}

<!-- .irs--shiny .irs-handle:hover { background-color: darkgray; width: 12px; height: 12px; top: 23px } -->
```

```{r setup}
#| include: false
if (!file.exists("MyEBirdData.csv")){
  stop("Cannot compile document. Missing required file \"MyEBirdData.csv\".\nPlease add this file with your personal eBird data to the folder from which you compile the document.")
}

if (TRUE == FALSE){
  # KEEP THIS SECTION!
  # SHINYAPPS.IO scans R code to figure out which packages it needs to install.
  # It looks for 'library("[package]")' syntax, which this script does not use;
  # it uses a loop (see below) to load packages.
  library("tidyverse")
  library("ggplot2")
  library("shiny")
  library("bslib")
  library("bsicons")
  library("leaflet")
  library("ggiraph")
  library("formattable")
}

required_packages =
  c(
    "tidyverse",
    "ggplot2",
    "shiny",
    "bslib",
    "bsicons",
    "leaflet",
    "ggiraph",
    "formattable",
    "DT",
    "janitor"
  )
missing_packages = required_packages[!sapply(required_packages, requireNamespace, quietly = TRUE)]
if (length(missing_packages) > 0){
  stop(
    paste(
      "The following packages are required to run the dashboard:\n\n",
      paste0(missing_packages, collapse = ", "),
      "\n\nPlease make sure to install these packages before compiling the dashboard."
    )
  )
}

invisible(lapply(required_packages, library, character.only = TRUE))

original_ebird_green = "#2F7742"
ebird_green = "#70c687"
ebird_yellow = "#FFD800"
ebird_red = "#DA1C13"
light_gray = "#E5E5E5"
spring_color = "#70c687"
summer_color = "#FFD800"
fall_color = "#FF9900"
winter_color = "#56B3FA"

source("helper-functions.R", local = TRUE)
```

```{r}
#| context: server

react_delay = 1

change_slider = reactiveVal(Sys.time())
change_daterange = reactiveVal(Sys.time())
reactive_hotspot_values = reactiveVal(list(NULL))
earliest_date = reactiveVal()
latest_date = reactiveVal()
earliest_year = reactiveVal()
latest_year = reactiveVal()
n_rows_data = reactiveVal()
n_checklists = reactiveVal()
n_species = reactiveVal()
testje = reactiveVal(0)
import_counter = reactiveVal(0)
hotspot_latitude = reactiveVal(0)
hotspot_longitude = reactiveVal(0)
hotspot_name = reactiveVal("")
years = reactiveVal(list(NULL))

ebird_dat = reactiveVal({
  read_ebird_data()
})

imported_dat = reactive({
  req(input$upload)
  imported_dat = read_ebird_data(input$upload$datapath)
})

observeEvent(input$upload, {
  # triggered in response to the user uploading a file
  import_counter(import_counter() + 1)
  imported_dat = read_ebird_data(input$upload$datapath)
  ebird_dat(imported_dat)
  years(as.numeric(as.character(sort(unique(imported_dat$year)))))
  earliest_date(min(imported_dat$date))
  latest_date(max(imported_dat$date))
  updateSelectInput(
    session,
    "years_year_from",
    choices = years()
  )
  updateSelectInput(
    session,
    "years_year_to",
    choices = years()
  )
  updateSliderInput(
    session,
    "date_range_slider",
    min = earliest_date(),
    max = latest_date(),
    value = c(earliest_date(), latest_date()),
    timeFormat = "%b %Y"
  )
  updateDateRangeInput(
    session,
    "date_range",
    start = earliest_date(),
    end = latest_date(),
    min = earliest_date(),
    max = latest_date()
  )
  n_rows_data(nrow(imported_dat))
  n_checklists(
    imported_dat %>%
      distinct(submission_id) %>%
      nrow()
  )
  n_species(
    imported_dat %>% 
      distinct(common_name) %>%
      nrow())
})

selected_dat = reactive({
  req(input$hotspot)
  req(input$observation_types)
  if (input$hotspot == "All"){
    # user has selected all hotspots
    my_selected_dat = ebird_dat()
  } else {
    # user has selected a hotspot
    my_selected_dat = 
      ebird_dat() %>% 
      filter(
        location == input$hotspot
      )
  }
  earliest_date(min(my_selected_dat$date))
  latest_date(max(my_selected_dat$date))
  years(as.numeric(as.character(sort(unique(my_selected_dat$year)))))
  observation_types = c(
    "Traveling" = "eBird - Traveling Count",
    "Stationary" = "eBird - Stationary Count",
    "Casual" = "eBird - Casual Observation"
  )
  ebird_observation_types = 
    observation_types[input$observation_types] |>
    unname()
  my_selected_dat = 
    my_selected_dat %>%
    filter(
      date >= input$date_range[1],
      date <= input$date_range[2]
    ) %>%
    filter(protocol %in% ebird_observation_types)
  
  earliest_year(min(as.numeric(as.character(my_selected_dat$year))))
  latest_year(max(as.numeric(as.character(my_selected_dat$year))))
  top_lat_lng =
    my_selected_dat %>%
    distinct(location, latitude, longitude)
  hotspot_latitude(top_lat_lng$latitude)
  hotspot_longitude(top_lat_lng$longitude)
  hotspot_name(top_lat_lng$location)
  return(my_selected_dat)
})

total_species = reactive({
  selected_dat() %>% distinct(common_name) %>% nrow()
})
output$total_species_text = renderText({
  total_species() %>% format(big.mark = ",")
}
)

total_checklists = reactive({
  selected_dat() %>% 
    distinct(submission_id) %>%
    nrow()
})
output$total_checklists_text = renderText({
  total_checklists() %>% format(big.mark = ",")
}
)

max_checklist = reactive({
  selected_dat() %>% 
    count(submission_id) %>%
    arrange(desc(n)) %>% 
    slice(1) %>% 
    pull(n)
})
output$max_checklist_text = renderText({
  max_checklist()
})

total_time = reactive({
  selected_dat() %>% 
    distinct(submission_id, duration_min) %>% 
    filter(!is.na(duration_min)) %>%
    summarize(total_time_hours = sum(duration_min) / 60) %>% 
    pull(total_time_hours) %>% 
    round(1)
})
output$total_time_text = renderText({
  total_time()
}
)

total_observations = reactive({
  selected_dat() %>%
    nrow()
})
output$total_observations_text = renderText({
  total_observations() %>% format(big.mark = ",")
})

# currently not using
# last_trip = reactive({
#   max_date = max(selected_dat()$date)
#   paste(
#     month(max_date, label = TRUE),
#     " ",
#     mday(max_date),
#     ", ",
#     year(max_date)
#   )
# })
# output$last_trip_text = renderText({
#   last_trip()
# }
# )

output$imported_data_statistics = renderText({
  ifelse(
    is.null(input$upload$name),
    "",
    paste0(
      "\nImported: \n ",
      n_rows_data() %>% format(big.mark = ","),
      " observations\n ",
      n_checklists() %>% format(big.mark = ","),
      " checklists\n ",
      n_species() %>% format(big.mark = ","),
      " species"
    )
  )
})

output$import_filename = renderText({
  ifelse(
    is.null(input$upload$name),
    "",
    paste0(
      input$upload$name
    )
  )
})

output$species_count_plot = renderGirafe({
  plot = 
    selected_dat() %>% 
    count(submission_id, location, date, us_season) %>% 
    mutate(
      my_label = paste(
        n,
        "species on ", 
        ordinal_date_suffix(date),
        "\n",
        location
      )
    ) %>% 
    ggplot(aes(x = date, y = n, color = us_season)) + 
    geom_point_interactive(
      #      position = ggbeeswarm::position_quasirandom(width = 1),
      shape = 16,
      aes(
        tooltip = my_label,
        data_id = submission_id,
        tooltip_fill = date,
        onclick = sprintf("window.open(\"https://ebird.org/checklist/%s\")", submission_id)
      )
    ) +
    scale_x_date() +
    scale_y_continuous(
      #      expand = expansion(add = c(1, 1)),
      limits = c(0, NA),
      breaks = ~unique(round(pretty(.)))
    ) +
    labs(
      #      title = "Total species reported by checklist",
      subtitle = "Note: Horizontal bar indicates median species count by season. Click on a dot to open the checklist in eBird.",
      x = "",
      y = "Total species reported"
    ) +
    theme_gray(base_size = 14) +
    theme(
      panel.grid = element_blank(),
      panel.background = element_blank(),
      axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
      plot.subtitle = element_text(
        color = "#707070",
        size = 10,
        margin = margin(t = 0, r = 0, b = 15, l = 0)
      )
    )
  if(input$season_coloring == "None"){
    plot = 
      plot +
      scale_color_manual(
        values = rep("#707070", 4),
        guide = "none"
      )
  } else {
    if(input$season_coloring == "Southern hemisphere"){
      plot = 
        plot +
        scale_color_manual(
          values = c("spring" = fall_color, "summer" = winter_color, "fall" = spring_color, "winter" = summer_color),
          guide = "none"
        )
    } else {
      plot = 
        plot +
        scale_color_manual(
          values = c("spring" = spring_color, "summer" = summer_color, "winter" = winter_color, "fall" = fall_color),
          guide = "none"
        )
    }
  }
  # add gray/white alternating backgrounds indicating seasons
  plot = 
    plot +
    geom_rect(
      data = my_rects(plot),
      aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = fill, alpha = alpha),
      inherit.aes = FALSE
    ) +
    scale_fill_identity(guide = "none") +
    scale_alpha_identity(guide = "none")
  
  # median species counts per checklist by season
  plot_min_x = as.Date(layer_scales(plot)$x$get_limits()[1])
  plot_max_x = as.Date(layer_scales(plot)$x$get_limits()[2])
  median_counts_by_season = 
    selected_dat() %>% 
    count(submission_id, location, date, us_season) %>% 
    mutate(year = year(date)) %>%
    select(year, us_season, date, n) %>% 
    full_join(
      tibble(
        date = seq.Date(plot_min_x, plot_max_x, by = "day")),
      by = "date"
    ) %>% 
    arrange(date) %>% 
    mutate(
      year = year(date),
      month = month(date),
      us_season = case_when(
        month < 3 | month == 12~ "winter",
        month < 6 ~ "spring",
        month < 9 ~ "summer",
        month < 12 ~ "fall",
        TRUE ~ NA
      )
    ) %>% 
    mutate(
      new_segment = 
        case_when(
          row_number() == 1 ~ TRUE,
          us_season != lag(us_season) ~ TRUE,
          TRUE ~ FALSE
        ),
      segment = cumsum(new_segment)
    ) %>% 
    group_by(segment, us_season) %>% 
    mutate(median_count = median(n, na.rm = TRUE)) %>% 
    slice(1, n()) %>% 
    select(segment, us_season, date, median_count) %>% 
    arrange(date)
  
  median_bars = tibble(
    x = median_counts_by_season %>%
      filter(row_number() == 1) %>% 
      pull(date),
    y = median_counts_by_season %>% 
      distinct(segment, us_season, median_count) %>% 
      pull(median_count),
    xend = median_counts_by_season %>%
      filter(row_number() == 2) %>% 
      pull(date),
    yend = median_counts_by_season %>% 
      distinct(segment, us_season, median_count) %>% 
      pull(median_count),
    us_season = median_counts_by_season %>% 
      distinct(segment, us_season) %>% 
      pull(us_season)
  )
  
  # add horizontal bars displaying median checklist species count by season
  plot = 
    plot +
    geom_segment(
      data = median_bars,
      aes(x = x, y = y, xend = xend, yend = yend, color = us_season),
      alpha = .3,
      linewidth = 3,
      inherit.aes = FALSE
    )
  
  # avoid fractions on the Y axis
  # y_axis_breaks = layer_scales(plot)$y$break_positions()
  # y_axis_breaks = y_axis_breaks[!is.na(y_axis_breaks)]
  # if (length(y_axis_breaks[y_axis_breaks != round(y_axis_breaks)]) > 0){
  #   y_axis_breaks = y_axis_breaks[y_axis_breaks == round(y_axis_breaks)]
  #   plot = 
  #     plot +
  #     scale_y_continuous(breaks = y_axis_breaks)
  # }
  girafe(
    ggobj = plot, 
    pointsize = 60,
    width_svg = (0.98 * (input$pltChange$width - 300) / input$pltChange$dpi),
    height_svg = (0.88 * (input$pltChange$height - 95 - 80) / input$pltChange$dpi)
    # width_svg = (0.98 * (input$pltChange$width - 300) / input$pltChange$dpi),
    # height_svg = (0.75 * (input$pltChange$height - 100) / input$pltChange$dpi)
  ) %>% 
    girafe_options(
      opts_sizing(rescale = FALSE),
      opts_toolbar(
        fixed = TRUE,
        pngname = "ebird-dashboard.png",
        hidden = c("selection", "saveaspng")
      ),
      opts_tooltip(
        use_fill = TRUE,
        opacity = .7,
        offx = 10,
        offy = 0
        #    css = "color:blue; background-color:red, fill-opacity:.5;"
        #    tooltip_fill = "white"
      ),
      #  opts_hover(css = "stroke:yellow;stroke-width:3px;fill-opacity:0.8;")
      opts_hover(
        css = "stroke:black; stroke-width:1px;"
      )
    )
})

output$data_preview = DT::renderDT({
  data_preview_table =
    selected_dat() %>%
    mutate(n_checklists = n_distinct(submission_id, na.rm = TRUE)) %>%
    group_by(common_name) %>%
    mutate(
      first_seen_checklist = ifelse(
        date == min(date) & row_number() == 1,
        submission_id,
        NA),
      last_seen_checklist = ifelse(
        date == max(date) & row_number() == n(),
        submission_id,
        NA)
    ) %>% 
    fill(first_seen_checklist, .direction = "down") %>% 
    fill(last_seen_checklist, .direction = "up") %>% 
    summarize(
      first_seen = min(date),
      last_seen = max(date),
      first_seen_checklist = unique(first_seen_checklist),
      last_seen_checklist = unique(last_seen_checklist),
      perc_checklists = (100 * (n() / max(n_checklists))) %>% round(1),
      n_checklists = n()
    ) %>%
    mutate(
      perc_checklists = my_color_bar()(perc_checklists),
      first_seen = paste0("<a target='_blank' href='https://ebird.org/checklist/", first_seen_checklist,"'>", first_seen, "</a>"),
      last_seen = paste0("<a target='_blank' href='https://ebird.org/checklist/", last_seen_checklist,"'>", last_seen, "</a>")
    ) %>% 
    select(-c(first_seen_checklist, last_seen_checklist)) %>% 
    arrange(desc(perc_checklists)) %>% 
    rename(
      "Species" = common_name,
      "First" = first_seen,
      "Last" = last_seen,
      "% Checklists" = perc_checklists,
      "N Checklists" = n_checklists
    )
  n_rows = nrow(data_preview_table)
  data_preview_table = 
    data_preview_table %>% 
    formattable() %>% 
    as.datatable(
      rownames = FALSE,
      options = list(
        processing = TRUE,
        serverSide = TRUE,
        dom = "fit",
        language = list(
          info = "Showing _START_ to _END_ of _TOTAL_ species.",
          zeroRecords = "No matching species found",
          infoFiltered = "(Filtered from _MAX_ total species.)"
        ),
        scrollY = ((input$pltChange$height - 122)) - 148,
        pageLength = n_rows
      )
    )
  # something in the above changes N checklists to character; fix for sorting
  data_preview_table$x$data$`N Checklists` = as.numeric(data_preview_table$x$data$`N Checklists`)
  return(data_preview_table)
})

output$data_observations = DT::renderDT({
  n_rows = nrow(selected_dat())
  observations_table =
    selected_dat() %>%
    arrange(desc(date), desc(time)) %>%
    select(date, count, common_name, location, submission_id, observation_details) %>%
    #     mutate(
    #       # can be used to display scrollable height, for trouble shooting
    #       height = input$pltChange$height,
    #       scrolly = paste0(0.65 * (input$pltChange$height - 95 - 80), "px")
    # ) %>%
    mutate(
      count = ifelse(count == -1, "X", count),
      observation_details = ifelse(is.na(observation_details), "", observation_details),
      submission_id = paste0("<a target='_blank' href='https://ebird.org/checklist/", submission_id,"'>", submission_id, "</a>")
    ) %>% 
    rename(
      "Date" = date,
      "Count" = count,
      "Common name" = common_name,
      "Location" = location,
      "Comments" = observation_details,
      "Checklist ID" = submission_id
    ) %>% 
    formattable() %>% 
    as.datatable(
      rownames = FALSE,
      options = list(
        processing = TRUE,
        serverSide = TRUE,
        language = list(
          lengthMenu = "Show _MENU_ observations per page",
          infoFiltered = "(Filtered from _MAX_ total observations.)",
          processing = "Processing ...",
          info = "Showing _START_ to _END_ of _TOTAL_ observations.",
          zeroRecords = "No matching observations found"
        ),
        dom = "rlipt",
        scrollY = ((input$pltChange$height - 122)) - 148,
        lengthMenu = c(10, 50, 100, 500, 1000),
        pageLength = 1000,
        columnDefs = list(
          list(width = '12%', targets = 0),
          list(width = '8%', targets = 1),
          list(width = '20%', targets = 2),
          list(width = '25%', targets = 3),
          list(width = '8%', targets = 4),
          list(width = '27%', targets = 5)
        )
      ),
      filter = list(
        position = 'top', clear = FALSE
      )
    )
  # # something in the above changes N checklists to character; fix for sorting
  # data_preview_table$x$data$`N checklists` = as.numeric(data_preview_table$x$data$`N checklists`)
  return(observations_table)
}, server = TRUE)

output$year1_table = DT::renderDT({
  table_dat = 
    selected_dat()%>% 
    filter(year == input$year_list_slider[1]) %>% 
    group_by(common_name) %>% 
    slice(1) %>% 
    ungroup() %>% 
    arrange(desc(date)) %>% 
    mutate(date = substr(date, 6, length(date))) %>% 
    select(common_name, date)
  n_species = paste0(input$year_list_slider[1], ": ", nrow(table_dat), " species")
  table_dat %>% 
    rename(
      !!n_species := common_name
    ) %>% 
    formattable() %>% 
    as.datatable(
      rownames = FALSE,
      options = list(
        dom = "ft",
        scrollY = ((input$pltChange$height - 122) * .50) - 148,
        pageLength = 10000
      )
    )
})

output$year2_table = DT::renderDT({
  table_dat = 
    selected_dat() %>% 
    filter(year == input$year_list_slider[2]) %>% 
    group_by(common_name) %>%
    arrange(date) %>% 
    slice(1) %>% 
    ungroup() %>% 
    arrange(desc(date)) %>% 
    mutate(date = substr(date, 6, length(date))) %>% 
    select(common_name, date)
  n_species = paste0(input$year_list_slider[2], ": ", nrow(table_dat), " species")
  table_dat %>% 
    rename(
      !!n_species := common_name
    ) %>% 
    formattable() %>% 
    as.datatable(
      rownames = FALSE,
      options = list(
        dom = "ft",
        scrollY = ((input$pltChange$height - 122) * .50) - 148,
        pageLength = 10000
      )
    )
})

# currently not used
# output$total_time_birding = renderPlot({
#   selected_dat() %>% 
#     distinct(year, submission_id, duration_min) %>%
#     group_by(year) %>% 
#     summarize(total_time_min = sum(duration_min, na.rm = TRUE)) %>% 
#     mutate(total_time_hrs = total_time_min / 60) %>% 
#     ggplot(aes(x = year, y = total_time_hrs)) + 
#     geom_col() +
#     labs(
#       x = "",
#       y = "Total time (hours)"
#     ) +
#     theme_gray(base_size = 14) +
#     theme(
#       panel.background = element_blank()
#     )
# })

# currently not used
# output$hotspot_map = renderLeaflet({
#   leaflet() %>%
#     addTiles(
#       urlTemplate = "https://mts1.google.com/vt/lyrs=s&hl=en&src=app&x={x}&y={y}&z={z}&s=G",
#       attribution = "Google"
#     ) %>%
#     addMarkers(
#       lng = hotspot_longitude(), 
#       lat = hotspot_latitude(), 
#       popup = hotspot_name()
#       # lng = top_location_info$longitude, 
#       # lat = top_location_info$latitude, 
#       # popup = top_location_info$location
#     )
# }
# )

output$large_hotspot_map = renderLeaflet({
  leaflet() %>%
    addTiles(
      urlTemplate = "https://mts1.google.com/vt/lyrs=s&hl=en&src=app&x={x}&y={y}&z={z}&s=G",
      attribution = "Google"
    ) %>%
    addMarkers(
      lng = hotspot_longitude(), 
      lat = hotspot_latitude(), 
      popup = hotspot_name()
      # lng = top_location_info$longitude, 
      # lat = top_location_info$latitude, 
      # popup = top_location_info$location
    )
}
)

output$year_plot1 = renderPlot({
  selected_dat() %>% 
    year_list_ecdf(
      year_from = input$year_list_slider[1], 
      year_to = input$year_list_slider[2]
    )
})

observeEvent(c(earliest_year(), latest_year()), {
  updateSliderInput(
    session,
    "year_list_slider",
    min = earliest_year(),
    max = latest_year(),
    value = c(earliest_year(), latest_year())
  )
}
)

observeEvent(c(earliest_date(), latest_date()), {
  testje(testje() + 1)
  # reset sidebar date input if earliest or latest date of data changes
  updateSliderInput(
    session,
    "date_range_slider",
    min = earliest_date(),
    max = latest_date(),
    value = c(earliest_date(), latest_date()),
    timeFormat = "%b %Y"
  )
  updateSelectInput(
    session,
    "years_year_from",
    choices = years()
  )
  updateSelectInput(
    session,
    "years_year_to",
    choices = years()
  )
}
)

observeEvent(c(input$date_range_slider, input$ebird_dat, input$selected_dat), {
  if (difftime(Sys.time(), change_slider()) > react_delay) {
    change_daterange(Sys.time())
    updateDateRangeInput(
      session,
      "date_range",
      start = input$date_range_slider[[1]],
      end = input$date_range_slider[[2]]
    )
  }
}
)

observeEvent(c(input$date_range, input$ebird_dat, input$selected_dat), {
  if (difftime(Sys.time(), change_daterange()) > react_delay) {
    change_slider(Sys.time())
    updateSliderInput(
      session,
      "date_range_slider",
      value = c(input$date_range[[1]],
                input$date_range[[2]]),
      timeFormat = "%b %Y"
    )
  }
})

observeEvent(
  c(input$hotspot_sorting, input$upload),
  { 
    if (input$hotspot_sorting == "Alphabetic"){
      hotspot_list = 
        ebird_dat() %>% 
        distinct(location) %>% 
        arrange(location)
      if (any(str_detect(hotspot_list$location, "^[0-9]"))){
      }
      # move hotspots whose name starts with a number to the bottom of the list
      # these names tend to be very long
      hotspot_list = 
        bind_rows(
          hotspot_list %>% 
            filter(!str_detect(location, "^[0-9]")),
          hotspot_list %>% 
            filter(str_detect(location, "^[0-9]"))
        )
      hotspot_list = c("All", hotspot_list %>% pull())
    } else
    {
      # arrange by Number of checklists reported
      hotspot_list =
        ebird_dat() %>%
        distinct(location, submission_id) %>% 
        count(location, sort = TRUE) %>%
        pull(location)
      hotspot_list = c("All", hotspot_list)
    }
    reactive_hotspot_values(hotspot_list)
    earliest_date(min(ebird_dat()$date))
    latest_date(max(ebird_dat()$date))
    years(as.numeric(as.character(sort(unique(ebird_dat()$year)))))
    updateSelectInput(
      session,
      "hotspot",
      choices = reactive_hotspot_values(),
      selected = NULL
    )
    updateSliderInput(
      session,
      "date_range_slider",
      min = earliest_date(),
      max = latest_date(),
      value = c(earliest_date(), latest_date()),
      timeFormat = "%b %Y"
    )
    updateDateRangeInput(
      session,
      "date_range",
      start = earliest_date(),
      end = latest_date(),
      min = earliest_date(),
      max = latest_date()
    )
  })

# for trouble shooting
# output$testje = renderText({
#   paste0(
#     "X: ", input$year_list_slider[1],
#     "\ntestje: ", testje(), 
#     "\nearliest date: ", earliest_date(),
#     "\nlatest date: ", latest_date(),
#     "\nearliest year: ", earliest_year(),
#     "\nlatest year: ", latest_year(),
#     "\nimport counter: ", import_counter()
#   )}
# )
# output$width = renderText({paste0("width: ", input$pltChange$width)})
# output$height = renderText({paste0("height: ", input$pltChange$height)})
```

## Sidebar {.sidebar width=225}

```{r}
#| title: "Filters"
# for troubleshooting
# verbatimTextOutput("width")
# verbatimTextOutput("height")

# for troubleshooting
# verbatimTextOutput("testje")

# p(bs_icon("feather"))

checkboxGroupInput(
  "observation_types",
  "Observation type",
  choices = c("Traveling", "Stationary", "Casual"),
  selected = c("Traveling")
  # choices = c("Traveling Count", "Stationary Count", "Casual Observation"),
  # selected = c("Traveling Count")
)

selectInput(
  "hotspot", 
  "Hotspot",
  choices = NULL,
  selected = NULL
)

selectInput(
  "hotspot_sorting", 
  "Hotspot list sorting",
  choices = list("Alphabetic", "Number of checklists"),
  selected = "Number of checklists"
)

selectInput(
  "season_coloring", 
  "Season colors",
  choices = list("Northern hemisphere", "Southern hemisphere", "None"),
  selected = "Northern hemisphere"
)

# div(
#   # top margin to accommodate sidebar close symbol
#   style = "margin-bottom: 15px; margin-top: 20px",
#   leafletOutput(
#     "hotspot_map",
#     height = "200", 
#     width = "200"
#   )
# )

div(
  style = "display: inline-block; padding-top: 0px; margin-top: 0px; margin-left: 16px; margin-right: 16px; font-size: 15px; width: 163px",
  div(style = "display: none;", "Slider"),
  sliderInput(
    "date_range_slider",
    "",
    min = Sys.Date() - 90,
    max = Sys.Date(),
    value =  c(Sys.Date() - 30, Sys.Date()),
    step = 1,
    ticks = FALSE,
    timeFormat = "%b %Y"
  )
)

div(
  tags$style(".form-control, .input-group-addon {padding: 0px 0px 0px 0px !important;}"),
  style = "display: inline-block; padding-top: 0px; margin-bottom: 0px; margin-top: -20px; text-align: center",
  dateRangeInput(
    "date_range", 
    "",
    start  = "2001-01-01",
    end    = "2010-12-31",
    min    = "2001-01-01",
    max    = "2012-12-21",
    format = "mm/dd  yyyy",
    weekstart = 1,
    separator = "to",
    startview = "year"
  )
)

# div(
#   style = "margin-top: 15px",
#   "Use your personal eBird data",
#   br(),
#   "1. ",
#   a(
#     "Download",
#     href = "https://ebird.org/downloadMyData",
#     target="_blank"
#   ),
#   " your eBird data"
# )

tags$div(
  style = "margin-top: 5px; margin-bottom: -10px;",
  fileInput(
    "upload",
    "",
    #    "2. Import your eBird data",
    accept = ".csv",
    buttonLabel = "Import data",
    multiple = FALSE,
    placeholder = "",
    width = "100%"
  )
)

verbatimTextOutput("imported_data_statistics")

tags$div(
  style = "margin-top: 0px",
  actionButton(
    inputId = 'ab1',
    class = "custom-download-button",
    label = "Download your eBird data", 
    onclick = "window.open('https://ebird.org/downloadMyData', '_blank')"
  )
)

#hr()
```

# Hotspot {orientation="rows"}

## Value boxes {height=10%}

```{r}
#tags$body(tags$style(HTML('.bslib-value-box .value-box-title {font-size: 0.5rem;}')))
box1 = value_box(
  title = "Species",
  value = textOutput("total_species_text"),
  #  showcase = bs_icon("feather"),
  theme = "primary",
  fill = FALSE,
  height = NULL
  #  style = 'background-color: #5092D0!important;')
)
box2 = value_box(
  title = "Checklists",
  value = textOutput("total_checklists_text"),
  #  showcase = bs_icon("list-check"),
  theme = "primary",
  fill = FALSE,
  height = NULL
)
box3 = value_box(
  title = "Max checklist",
  value = textOutput("max_checklist_text"),
  #  showcase = bs_icon("trophy"),
  # theme = value_box_theme(bg = original_ebird_green, fg = "white")
  theme = "primary",
  fill = FALSE,
  height = NULL
)
box4 = value_box(
  title = "Hours",
  value = textOutput("total_time_text"),
  #  showcase = bs_icon("stopwatch"),
  theme = "primary",
  fill = FALSE,
  height = NULL
)
box5 = value_box(
  title = "Observations",
  value = textOutput("total_observations_text"),
  theme = "primary",
  fill = FALSE,
  height = NULL
)
layout_column_wrap(
  fill = FALSE,
  fillable = FALSE,
  width = 1/5,
  gap = "2px",
  heights_equal = "row",
  box1, box2, box3, box4, box5,
  height = "100px",
  min_height = "100px"
  #  max_height = "250px"
)

# layout_columns(
#   col_widths = c(2, 2, 2, 2, 2),
#   box1,
#   box2,
#   box3,
#   box4,
#   box5
# )

# value_boxes = list(
#   value_box(
#     title = "Species",
#     value = textOutput("total_species_text"),
#     showcase = bs_icon("feather"),
#     theme = "primary",
#     full_screen = FALSE
#   ),
#   value_box(
#     title = "Checklists",
#     value = textOutput("total_checklists_text"),
#     showcase = bs_icon("list-check"),
#     theme = "primary",
#     full_screen = FALSE
#   ),
#   value_box(
#     title = "Hours",
#     value = textOutput("total_time_text"),
#     showcase = bs_icon("stopwatch"),
#     theme = "primary",
#     full_screen = FALSE
#   ),
#   value_box(
#     title = "Last Trip",
#     value = textOutput("last_trip_text", container = h4),
#     showcase = bs_icon("calendar-event"),
#     theme = "success",
#     full_screen = FALSE
# #    style = "height: 100px; resize: both"
#   )
# )
# layout_column_wrap(
# #  height = "150px",
#   width_default = "100%",
#   width = c("25%", "25%", "25%", "25%"),
#   !!!value_boxes
# )
```

## Tabs {height=90%, .tabset expandable=false overflow=hidden}

```{r}
#| title: "Checklists"
# https://stackoverflow.com/questions/65267602/can-a-ggiraph-interactive-plot-be-the-size-of-the-window-in-r-shiny
#p("Click on a data point to open the checklist in eBird")
tags$body(tags$div(id="ppitest", style="width:1in;visible:hidden;padding:0px"))
tags$script('$(document).on("shiny:connected", function(e) {
                                    var w = window.innerWidth;
                                    var h = window.innerHeight;
                                    var d =  document.getElementById("ppitest").offsetWidth;
                                    var obj = {width: w, height: h, dpi: d};
                                    Shiny.onInputChange("pltChange", obj);
                                });
                                $(window).resize(function(e) {
                                    var w = $(this).width();
                                    var h = $(this).height();
                                    var d =  document.getElementById("ppitest").offsetWidth;
                                    var obj = {width: w, height: h, dpi: d};
                                    Shiny.onInputChange("pltChange", obj);
                                });
                            ')
tags$script(HTML("
$(document).on('shown.bs.tab', 'a[data-toggle=\"tab\"]', function (e) {
    var w = $(window).width();
    var h = $(window).height();
    var d = document.getElementById(\"ppitest\").offsetWidth;
    var obj = {width: w, height: h, dpi: d};
    Shiny.onInputChange(\"pltChange\", obj);
});
"))
girafeOutput("species_count_plot")
```

### Species

```{r}
div(
  DT::DTOutput("data_preview"),
  style = "font-size: 80%"
)
```


### Year list

:::: {.columns-container border-style="none"}
:::: {.columns border-style="none"} 
::: {.column width="100%"}
::: {.top-left-container border-style="none"}

```{r}
# NOTE: size of each container on the Year List tab is defined in styles.css
div(
  style = "display: inline-block; padding-top: 0px; margin-top: 0px; margin-left: 16px; margin-right: 16px; font-size: 15px; margin-bottom: 300px;",
  sliderInput(
    "year_list_slider",
    "",
    min = min(years()),
    max = max(years()),
    value =  c(min(years()), max(years())),
    ticks = FALSE,
    step = 1,
    sep = "",
    width = "100%"
  )
)
```

:::
::: {.bottom-left-container}

```{r}
div(
  style = "margin: 0px; padding: 0px;border-style: none",
  plotOutput("year_plot1")
)
```

:::
:::

::: {.column width="100%"}
::: {.top-right-container}

```{r}
div(
  style = "font-size: .75em;",
  DT::DTOutput("year1_table")
)
```

:::
::: {.bottom-right-container}

```{r}
div(
  style = "font-size: .75em;",
  DT::DTOutput("year2_table")
)
```

:::
:::
::::
::::

### Observations

```{r}
div(
  DT::DTOutput("data_observations"),
  style = "font-size: 80%"
)
```

<!-- ### Years -->

<!-- ```{r} -->
<!-- selectInput( -->
<!--   "years_year_from", -->
<!--   "From", -->
<!--   years(), -->
<!--   multiple = FALSE, -->
<!--   selectize = TRUE, -->
<!--   width = "100px", -->
<!--   size = NULL -->
<!-- ) -->
<!-- selectInput( -->
<!--   "years_year_to", -->
<!--   "To", -->
<!--   years(), -->
<!--   multiple = FALSE, -->
<!--   selectize = TRUE, -->
<!--   width = "100px", -->
<!--   size = NULL -->
<!-- ) -->
<!-- plotOutput("total_time_birding") -->
<!-- ``` -->

### Map

```{r}
leafletOutput(
  "large_hotspot_map"#,
  #    height = "200",
  #    width = "200"
)
```

### Help

```{r}
#p("Placeholder for text on the help tab.")
div(
  h3("Sidebar"),
  p("The arrow in the top right of the sidebar allows you to close and reopen the sidebar."),
  strong("Hotspot"),
  p("The dashboard shows data for the hotspot selected. You can select a hotspot by selecting one from the list, but also by typing (part of) its name in the Hotspot box. The hotspots are either sorted alphabetically by name, or by the total number of checklists associated with each hotspot (in descending order). This can be controlled using the “Hotspot list sorting” setting."),
  strong("Season colors"),
  p("This setting controls the season colors in the graph on the Checklists tab."),
  strong("Date range"),
  p("By default, the dashboard uses all your data. You can limit the data it uses by moving the date range slider (which moves the start and ending dates in increments of about 1 month) or by clicking on the start or ending date and selecting a specific year, month and day of the month."),
  strong("Import"),
  p("You can use the “Import…” button to load your personal eBird data if you have stored those locally on your machine. You can download your personal data ", a("here", href = "https://ebird.org/downloadMyData", target = "_blank"),"."),
  p("By default, the dashboard displays my personal ebird data. If you have cloned my code and are compiling the dashboard locally on your machine, you can replace my data permanently by moving your “MyEBirdData.csv” file to the folder where the dashboard code is stored."),
  h3("Tabs"),
  strong("Checklists"),
  p("Each dot in this data visualization represents one checklist. The horizontal axis indicates the checklist date, and the vertical axis indicates the total number of species reported for that checklist. For each season, a horizontal bar indicates the median number of species on a checklist. The season is indicated by color: blue for winter, green for spring, yellow for summer, and orange for fall. By default, the colors align with the seasons of the Northern hemisphere. You can modify this by changing the “Season colors” setting to Southern hemisphere."),
  p("A summary of each checklist, including its location, can be gleaned by hovering the mouse cursor over a dot in the graph. Clicking the dot will open a new tab with the checklist in eBird."),
  strong("Species"),
  p("This table shows, for each species that you have reported: when you first reported it; when you last reported it; the percentage of your checklists on which the species occurs; the total number of your checklists on which the species occurs."),
  p("The Search box can be used to quickly navigate to data for a specific species. It can also be used to compare data for a group of birds with similar names. For instance, searching for “sparrow” will return a list of species whose name includes the word “sparrow”."),
  p("Each column can be sorted in ascending or descending order by clicking its name."),
  strong("Year list"),
  p("This tab allows you to compare data for two specific calendar years. The graph shows the cumulative number of unique species reported throughout the year, with the most recent year indicated in blue. Each table lists the total number of species reported, and the date at which a species was first reported."),
  strong("Observations"),
  p("This table shows data for each checklist observation. (Note that the table may load a bit slowly if you are looking at a lot of observations.) Each column can be sorted in ascending or descending order by clicking its name. Each column can also be filtered; for instance, you can enter a species in the “Common name” column to see only observations for that species."),
  p("Clicking on the “Checklist ID” will open a new tab with the checklist in eBird."),
  strong("Map"),
  p("The map shows a satellite image of the hotspot(s) that you selected. Clicking on the tool in the bottom left corner of the map allows you to zoom in and out."),
  
  h3("Helpful eBird information"),
  
  a("Best practices", href = "https://support.ebird.org/en/support/solutions/articles/48000795623-ebird-rules-and-best-practices", target = "_blank"),
  a("How to count birds", href = "https://support.ebird.org/en/support/solutions/articles/48000838845", target = "_blank")
)
```
